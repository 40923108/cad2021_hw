var tipuesearch = {"pages": [{'title': 'About', 'text': 'Number：40923108\xa0 \n 網站倉儲:\xa0 https://github.com/40923108/cad2021_hw \n 網站連結:\xa0 https://40923108.github.io/cad2021_hw/', 'tags': '', 'url': 'About.html'}, {'title': 'HW1', 'text': 'HW1 佔學期成績 25% \n HW1 必須在 2021.11.10 22:00 之前完成. \n HW1 具體項目成果回報區 將於 2021.09.23 開啟, 於  2021.11.10 22:00 關閉. \n 作業一: meArm Robot 零件繪圖與機電運動模擬場景製作 \n Step1 : 下載  meARM.7z  這個包含尚未完成組立的 meArm Robot 場景與雷射切割零件組立手冊. \n meArm_75-0040_v1.pdf  則是另外一本組立參考手冊. \n Step2 : 從課程網頁中的  Compile CoppeliaSim 頁面 , 下載  coppeliaSim 4.1.0 官方版與 MSYS2 編譯版.7z  (檔案大小 412 MB, 解開壓縮後 1GB) 可攜套件. \n Step3 : 在 HW1 中, 要求每一位學員透過程式亂數分配 (兩班實際亂數分配結果以上課時點擊下列按鈕所得結果為準) 所使用的兩套參數式 CAD 套件, 從軟體發展緣起開始進行介紹,\xa0 經過教育版軟體套件檔案的取得, 下載安裝以及配置使用. 根據 Step1 中的零件尺寸, 逐一完成 meArm Robot 各零件繪製與組立. 並將零件 匯入  CoppeliaSim 進行組裝配置後, 以  UI 介面 中的 slider 控制 meArm Robot 各軸的旋轉作動. \n 2b CAD 套件分配結果:  https://mde.tw/cad2021/downloads/online/2b_hw1_cad.txt \n 附件: \n 1. CAD 套件分配表: \n sw: Solidworks, inv: Inventor, nx: NX12, ons: Onshape, slvs: Solvespace \n 2a 套件亂數分配結果 \n 2b 套件亂數分配結果 \n 2. 在兩套 CAD 完成零件繪圖並轉入 CoppeliaSim 後, 為了建立 Dynamic Model 必須利用  shape edit modes  轉為  clean model , 並與實際轉入的 STL 格式零件外形結合應用後建立模擬場景 (scenes). \n 3. meARM Robot  動態模擬場景 的建構, 可參考  0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ,  7 , 也可參考  Uarm Robot model  與相關 影片 . \n 4. CoppeliaSim design dynamic simulations  說明頁面 . \n 5.  網際 Lua  程式執行. \n 6.  meArm.slvs ,  meArm_in_solvespace.slvs \n 7. UI 介面程式參考: \n function closeEventHandler(h)\n    sim.addLog(sim.verbosity_scriptinfos,\'Window \'..h..\' is closing...\')\n    simUI.hide(h)\nend\n\nfunction joint1_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta1 set to \'..newVal)\n    sim.setJointTargetPosition(joint1, newVal*deg)\nend\n\nfunction joint2_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta2 set to \'..newVal)\n    sim.setJointTargetPosition(joint2, newVal*deg)\nend\n\nfunction joint3_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta3 set to \'..newVal)\n    sim.setJointTargetPosition(joint3, newVal*deg)\nend\n\nfunction joint16_rotate(ui,id,newVal)\n    simUI.setLabelText(ui,3000,\'theta16 set to \'..newVal)\n    sim.setJointTargetPosition(joint16, newVal*deg)\n    sim.setJointTargetPosition(joint20, -newVal*deg)\nend\n\nfunction sysCall_init()\n    -- do some initialization here\n    joint1 = sim.getObjectHandle(\'motor1\')\n    joint2 = sim.getObjectHandle(\'motor2\')\n    joint3 = sim.getObjectHandle(\'motor3\')\n    joint16 = sim.getObjectHandle(\'motor16\')\n    joint20 = sim.getObjectHandle(\'motor20\')\n    i = 0\n    deg = math.pi/180\n    print(i)\n    xml = [[\n<ui closeable="true" on-close="closeEventHandler" resizable="true">\n    <label text="This is a demo of the CustomUI plugin. Browse through the tabs below to explore all the widgets that can be created with the plugin." wordwrap="true" />\n    <tabs>\n        <tab title="Numeric">a\n            <label text="Sliders can be oriented horizontally or vertically, and have optional properties that can be set (in the XML) such as minimum and maximum value." wordwrap="true" />\n            <label text="" id="3000" wordwrap="true" />\n            <label text="theta1" /> <hslider tick-position="above" tick-interval="1" \n            minimum="0" maximum="360" on-change="joint1_rotate" />\n            <label text="theta2" /> <hslider tick-position="above" tick-interval="1" \n            minimum="-90" maximum="65" on-change="joint2_rotate" />\n            <label text="theta3" /> <hslider tick-position="above" tick-interval="1" \n            minimum="-90" maximum="185" on-change="joint3_rotate" />\n            <label text="theta16" /> <hslider tick-position="above" tick-interval="1" \n            minimum="0" maximum="15" on-change="joint16_rotate" />\n        </tab>\n    </tabs>\n</ui>\n]]\n    ui=simUI.create(xml)\n    \nend \n \n (From:  2016_ADDITIVE MANUFACTURING PROCESSES FOR FABRICATING A MINI ROBOT - COMPUTATIONAL MODELS AND EXPERIMENTAL RESULTS.pdf ) \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'CAD1 Solvespace', 'text': 'Solvespace 緣起說明與介紹 \n SolveSpace 的大部分基本功能，包括草圖、約束、拉伸和布爾運算。 \n \n 組裝： 可以修改零件並重新生成裝配體，零件將保持在所需配置中的組裝狀態 \n 約束：幾種不同的方式約束一個簡單的草圖，並在過度約束後使用 SolveSpace 提供的工具進行調\xa0 試，查看具有多個解決方案的草圖，以及 3d 和投影到工作平面中的約束。 \n 鏈接：幾何約束對平面連桿進行建模； 然後我們置換其中一個鏈接，讓約束求解器計算結果幾何，用它來繪製連桿的耦合器曲線，並為連接到連桿骨架的實體模型設置動畫。 \n 二維繪圖：使用 SolveSpace 繪製純二維零件。 從一個輪廓開始，並使用尺寸和約束來指定 使用特殊工具在相交處分割直線和曲線，並相互修剪、圓化尖角。 繪製零件後，在幾何體上放置裝飾尺寸，並導出人類可讀的尺寸圖。 \n \n \n', 'tags': '', 'url': 'CAD1 Solvespace.html'}, {'title': 'CAD1 安裝配置', 'text': 'Solvesape安裝步驟 \n 點入下圖連結\xa0 \n \n \n \n \n \n 放入資料夾內即可完成 \n 把 start_ipv4.bat 拉至白窗 \n 新增下圖段落，啟用時就能同時開啟solvespace \n \n Solvespace 安裝影片 \n \n', 'tags': '', 'url': 'CAD1 安裝配置.html'}, {'title': 'CAD1 操作流程', 'text': '首先啟動solvespace後 \n 點擊 image 即可載入圖片即可開始繪圖 \n \n 1的區塊為 繪製工具 \n 2的區塊為 註解、限制級修改圖形 \n 3的區塊為 展開圖形 \n 所有功能都有屬於自己的快捷鍵，在名稱後的()括弧內。 \n \n 點擊滑鼠 左鍵 拉伸圖片大小 \n 按住滑鼠中間 滾輪 可旋轉平面 \n 滾動滾輪可調整視窗大小 \n \n 旋轉畫面後可按 W 返回最一開始的工作平面 \n 註：W 為 Align view to workplanw 快捷鍵，在上排的view底下 \n solvespace安裝影片 \n \n slovespace繪圖方式 \n \n', 'tags': '', 'url': 'CAD1 操作流程.html'}, {'title': 'CAD2 Onshape', 'text': 'Onshape 緣起說明與介紹 \n Onshape為一套線上3D軟體，無須透過下載、安裝或許可證代碼得到程式，僅需透過任何的 現代網路瀏覽器訪問 Onshape 的平台。 管理員可以立即配置和取消配置以擴展他們的設計團隊並滿足不斷變化的業務需求，團隊還可以一起或彼此獨立地試驗設計備選方案，而不會影響彼此的工作，然而團隊間可以一起或彼此獨立地試驗設計備選方案，而不會影響彼此的工作。 \n Onshape 基本設定 \n 將基本單位設定成公制 \n \n 設定滑鼠的使用習慣方便操作 \n \n \n Onshape版面介紹 \n 點選左上方建立，以便建立草圖 \n \n 共有三個平面 \n 分別有：Top/Front/Right \n 點選是當平面即可開始繪圖 \n \n \n', 'tags': '', 'url': 'CAD2 Onshape.html'}, {'title': 'CAD2 安裝配置', 'text': 'Onshape 安裝步驟 \n 先登入申請學生帳號test \n \n \n \n 輸入個人資料、設定 \n \n onshape安裝影片： \n \n', 'tags': '', 'url': 'CAD2 安裝配置.html'}, {'title': 'CAD2 操作流程', 'text': 'onshape繪圖流程： \n \n \n', 'tags': '', 'url': 'CAD2 操作流程.html'}, {'title': '運動場景', 'text': 'CAD1: \n solvespace零件轉出後轉入 CoppeliaSim 操作影片\xa0 \n \n CAD2: \n onshape 零件轉出後轉入 CoppeliaSim 操作影片\xa0 \n \n \n', 'tags': '', 'url': '運動場景.html'}, {'title': 'H3', 'text': '自選 CAD 套件, 完成零組件繪圖後, 轉入 CoppeliaSim, 以 Slider 0-360 度控制藍色搖桿轉動 . \n 零件繪製： \n \n \n \n \n \n \n \n \n \n \n ------------------------------------------------------------------------------------------------------- \n 這學期被分配到 solvespace、onshape \n Solvespace 緣起說明與介紹 \n SolveSpace 的大部分基本功能，包括草圖、約束、拉伸和布爾運算。 \n \n 組裝： 可以修改零件並重新生成裝配體，零件將保持在所需配置中的組裝狀態 \n 約束：幾種不同的方式約束一個簡單的草圖，並在過度約束後使用 SolveSpace 提供的工具進行調\xa0 試，查看具有多個解決方案的草圖，以及 3d 和投影到工作平面中的約束。 \n 鏈接：幾何約束對平面連桿進行建模； 然後我們置換其中一個鏈接，讓約束求解器計算結果幾何，用它來繪製連桿的耦合器曲線，並為連接到連桿骨架的實體模型設置動畫。 \n 二維繪圖：使用 SolveSpace 繪製純二維零件。 從一個輪廓開始，並使用尺寸和約束來指定 使用特殊工具在相交處分割直線和曲線，並相互修剪、圓化尖角。 繪製零件後，在幾何體上放置裝飾尺寸，並導出人類可讀的尺寸圖。 \n \n Solvesape安裝步驟 \n 點入下圖連結 \n \n \n \n \n 放入資料夾內即可完成 \n 把 start_ipv4.bat 拉至白窗 \n 新增下圖段落，啟用時就能同時開啟solvespace \n \n solvespace下載影片： \n \n solvespace操作流程： \n 首先啟動solvespace後 \n 點擊 image 即可載入圖片即可開始繪圖 \n \n 1的區塊為 繪製工具 \n 2的區塊為 註解、限制級修改圖形 \n 3的區塊為 展開圖形 \n 所有功能都有屬於自己的快捷鍵，在名稱後的()括弧內。 \n \n 點擊滑鼠 左鍵 拉伸圖片大小 \n 按住滑鼠中間 滾輪 可旋轉平面 \n 滾動滾輪可調整視窗大小 \n \n 旋轉畫面後可按 W 返回最一開始的工作平面 \n 註：W 為 Align view to workplanw 快捷鍵，在上排的view底下 \n solvespace繪圖： \n \n ------------------------------------------------------------------------------------------------------- \n Onshape 緣起說明與介紹 \n Onshape為一套線上3D軟體，無須透過下載、安裝或許可證代碼得到程式，僅需透過任何的 現代網路瀏覽器訪問 Onshape 的平台。 管理員可以立即配置和取消配置以擴展他們的設計團隊並滿足不斷變化的業務需求，團隊還可以一起或彼此獨立地試驗設計備選方案，而不會影響彼此的工作，然而團隊間可以一起或彼此獨立地試驗設計備選方案，而不會影響彼此的工作。 \n Onshape 基本設定 \n 將基本單位設定成公制 \n onshap下載： \n \n onshape 繪圖： \n \n onshape 四連桿組合： \n \n ------------------------------------------------------------------------------------------------------- \n mearm模擬： \n', 'tags': '', 'url': 'H3.html'}, {'title': 'W13', 'text': 'onshape使用wink錄製連桿繪圖過程 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n onshape使用wink錄製連桿組合過程 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n solvespace使用wink錄製連桿繪圖過程 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 四連桿模擬 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'HW2', 'text': 'HW2 佔學期成績 20% \n HW2 必須在 2021.12.22 22:00 之前完成. \n HW2 具體項目成果回報區 將於 2021.12.09 開啟, 於  2021.12.22 22:00 關閉. \n meArm 逆向運動學與網際參數式 CAD API 結合應用. \n 請將  https://github.com/mdecourse/meArm  中的 meArm Robot 逆向運動學程式, 改為 Lua 與 Python 程式, 使能套用至 HW1 所完成的 CoppeliaSim meArm 運動模擬場景. 並分別採 Lua, Legacy remote API 及 Bluezero remote API 逆向運動的方式進行控制. \n 請利用  Task2  中的 Solidworks, Inventor 與 NX API 程式控制 meArm Robot 零組件尺寸, 說明並討論如何透過網際程式控制 meArm Robot 的零件尺寸, 並結合上述逆向運動學程式庫, 使得自動化機電產品開發流程更容易滿足客製化需求. \n 參考: \n 2016_ADDITIVE MANUFACTURING PROCESSES FOR FABRICATING A MINI ROBOT - COMPUTATIONAL MODELS AND EXPERIMENTAL RESULTS.pdf \n Robot Manipulator Control with Inverse Kinematics PD-Pseudoinverse Jacobian and Forward Kinematics Denavit Hartenber.pdf \n KINEMATIC ANALYSIS FOR ROBOT ARM.pdf \n https://codebender.cc/user/MeArm \n https://github.com/mdecourse/meArmPi \n /downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf \n https://github.com/mdecourse/me-arm-ik \n https://github.com/mdecourse/mearm_model \n https://courses.ece.cornell.edu/ece5990/ECE5725_Fall2016_Projects/pas324_ml634/index.html \n https://github.com/mdecourse/InefficientSkittleSorter \n https://mearm.com \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 為選項作業. \n HW3 具體項目成果回報區 將於 2021.12.09 開啟, 於  2022.01.05 22:00 關閉 \n https://mde.tw/cad2021/content/Task3.html \xa0 \n https://mde.tw/cad2021/content/Task4.html \n https://mde.tw/cad2021/content/Task5.html \n https://mde.tw/cad2021/content/Task6.html \n https://mde.tw/cad2021/content/Task7.html \n 請從上列 Tasks 中自行選擇項目內容完成 HW3. \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'MeArm模擬', 'text': '零件模擬檔案： https://drive.google.com/file/d/154Y6cba4tB8eaWRpusbaNr6o71bBM73h/view \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'MeArm模擬.html'}, {'title': 'Final Project', 'text': 'Final Project 佔學期成績 40% \n 2a 與 2b 必須在 2022.01.06 上課之前完成 Final Project \n Final Project 具體項目成果回報區 將於 2021.12.09 開啟, 於 \xa0 2022.01.05 22:00 關閉 \n 彈性製造系統場景設計與製作 \n 請從 \xa0 https://github.com/mdecourse/scenes \xa0 與 \xa0 https://github.com/mdecourse/models \xa0 中選擇場景或模型, 配合 \xa0 cad2021_textbook.pdf \xa0 (登入 @gm 帳號後下載) 教材中的內容, 自選製作與組立產品, 組合成一個 Flexible Manufacturing System 系統場景. \n 彈性製造系統內', 'tags': '', 'url': 'Final Project.html'}, {'title': 'Note', 'text': '', 'tags': '', 'url': 'Note.html'}, {'title': '倉儲建立', 'text': '到 mde.tw > cmstemplate 內的 可攜系統 \n 下載三個可攜程式到隨身碟 \n \n 將ipv4拉至白窗 \n 修改ipv4和下圖畫底線處一樣 \n \n \n 使用template，創建個人倉儲及網站 \n \n 創立一個名為 cad2021_hw 的倉儲 \n \n 複製個人倉儲的URL後git clone \n 註：需要在網址的最後加上 .git \n 完成clone可啟動動態網站 \n \n (第一次啟動動態網站會出現錯誤，需要打上 pip install pyopenssl ) \n', 'tags': '', 'url': '倉儲建立.html'}, {'title': 'Token', 'text': '到 setting 中的 developer setting  創建一個無期限的token \n \n 成功創好token會給一串密碼(紅色底線)，需放到config裡 \n 在token後需要自己加一個 @ \n \n', 'tags': '', 'url': 'Token.html'}, {'title': 'Wink', 'text': '從Google搜尋 debugmode wink \n 將wink下載下來 \n \n 開啟wink的應用程式 \n \n 按下 I Agree \n \n 按\xa0 Browse\xa0 將資料存在隨身碟中 ，最後  Install \xa0 就下載好了 \n \n Wink 使用影片 \n \n \n \n \n \n   \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Wink.html'}, {'title': 'Fossil', 'text': '', 'tags': '', 'url': 'Fossil.html'}, {'title': 'RUN', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n', 'tags': '', 'url': 'RUN.html'}]};